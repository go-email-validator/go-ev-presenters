syntax = "proto3";

package github.com.go_email_validator.go_ev_presenters.pkg.presenters.check_if_email_exist;

option go_package = "github.com/go-email-validator/go-ev-presenters/pkg/api/v1/check_if_email_exist";

message Result {
  string input = 1 [json_name = "input"];
  string is_reachable = 2 [json_name = "is_reachable"];
  Misc misc = 3 [json_name = "misc"];
  MX mx = 4 [json_name = "mx"];
  SMTP smtp = 5 [json_name = "smtp"];
  Syntax syntax = 6 [json_name = "syntax"];
  string error = 7 [json_name = "error"];
}

message Misc {
  bool is_disposable = 1 [json_name = "is_disposable"];
  bool is_role_account = 2 [json_name = "is_role_account"];
}

message MX {
  bool accepts_mail = 1 [json_name = "accepts_mail"];
  repeated string records = 2 [json_name = "records"];
}

message SMTP {
  bool can_connect_smtp = 1 [json_name = "can_connect_smtp"];
  bool has_full_inbox = 2 [json_name = "has_full_inbox"];
  bool is_catch_all = 3 [json_name = "is_catch_all"];
  bool is_deliverable = 4 [json_name = "is_deliverable"];
  bool is_disabled = 5 [json_name = "is_disabled"];
}

message Syntax {
  string address = 1 [json_name = "username"];
  string domain = 2 [json_name = "domain"];
  bool is_valid_syntax = 3 [json_name = "is_valid_syntax"];
  string username = 4 [json_name = "username"];
}
