/*
 * Email Validator
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.0.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import "C"
import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"github.com/getkin/kin-openapi/openapi3filter"
	"github.com/go-email-validator/go-ev-presenters/pkg/presenter"
	"github.com/go-email-validator/go-ev-presenters/pkg/presenter/preparer"
	"github.com/gofiber/fiber/v2"
	"github.com/prometheus/common/log"
	"net/http"
)

func Error(c *fiber.Ctx, err error) error {
	return c.JSON(UnexpectedError{Message: err.Error()})
}

func JsonUnmarshal(c *fiber.Ctx, data []byte, v interface{}) error {
	if err := json.Unmarshal(data, v); err != nil {
		c.Status(http.StatusBadRequest)
		return Error(c, err)
	}
	return nil
}

var ErrAuthApiKey = errors.New("apiKey is incorrect")
var router = openapi3filter.NewRouter().WithSwaggerFromFile("api/v1/openapiv3/ev.openapiv3.yaml")
var options = &openapi3filter.Options{
	AuthenticationFunc: func(c context.Context, input *openapi3filter.AuthenticationInput) error {
		if input.RequestValidationInput.Request.Header.Get(input.SecurityScheme.Name) != "123" {
			return input.NewError(ErrAuthApiKey)
		}
		return nil
	},
}

func IsValid(c *fiber.Ctx) bool {
	httpReq, _ := http.NewRequest(c.Method(), c.Path(), bytes.NewReader(c.Body()))

	c.Request().Header.VisitAll(func(k, v []byte) {
		sk := string(k)
		sv := string(v)
		switch sk {
		case "Transfer-Encoding":
			httpReq.TransferEncoding = append(httpReq.TransferEncoding, sv)
		default:
			httpReq.Header.Set(sk, sv)
		}
	})

	route, pathParams, _ := router.FindRoute(c.Method(), httpReq.URL)
	requestValidationInput := &openapi3filter.RequestValidationInput{
		Request:    httpReq,
		PathParams: pathParams,
		Route:      route,
		Options:    options,
	}

	if err := openapi3filter.ValidateRequest(c.Context(), requestValidationInput); err != nil {
		if err := Error(c, err); err != nil {
			log.Error(err)
		}
		return false
	}
	return true
}

// A EmailValidationApiController binds http requests to an api service and writes the service results to the http response
type EmailValidationApiController struct {
	Presenter presenter.MultiplePresenter
	Matching  map[ResultType]preparer.Name
}

func (e *EmailValidationApiController) EmailValidationSingleValidationPost(c *fiber.Ctx) error {
	if !IsValid(c) {
		return nil
	}

	body := &EmailRequest{}
	if err := JsonUnmarshal(c, c.Request().Body(), &body); err != nil {
		return nil
	}

	if body.ResultType == "" {
		body.ResultType = CIEE
	}
	result, err := e.Presenter.SingleValidation(body.Email, e.Matching[body.ResultType])
	if err != nil {
		return Error(c, err)
	}

	return c.JSON(result)
}

var defaultResultType = string(CIEE)

func (e *EmailValidationApiController) EmailValidationSingleValidationGet(c *fiber.Ctx) error {
	if !IsValid(c) {
		return nil
	}

	email := c.Params("email")
	resultType := ResultType(c.Query("result_type", defaultResultType))

	result, err := e.Presenter.SingleValidation(email, e.Matching[resultType])
	if err != nil {
		return Error(c, err)
	}

	return c.JSON(result)
}
